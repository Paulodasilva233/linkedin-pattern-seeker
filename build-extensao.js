#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Compilando LinkedIn Pattern Seeker Extension...\n');

try {
  // 1. Limpar pasta dist
  if (fs.existsSync('dist')) {
    console.log('üßπ Limpando pasta dist...');
    fs.rmSync('dist', { recursive: true, force: true });
  }

  // 2. Build do projeto
  console.log('üì¶ Compilando projeto...');
  execSync('npm run build', { stdio: 'inherit' });

  // 3. Copiar arquivos da extens√£o
  console.log('üìÅ Copiando arquivos da extens√£o...');
  
  const extensionFiles = [
    { src: 'public/manifest.json', dest: 'dist/manifest.json' },
    { src: 'public/background.js', dest: 'dist/background.js' },
    { src: 'public/content-script.js', dest: 'dist/content-script.js' },
    { src: 'public/favicon.ico', dest: 'dist/favicon.ico' }
  ];

  extensionFiles.forEach(file => {
    if (fs.existsSync(file.src)) {
      fs.copyFileSync(file.src, file.dest);
      console.log(`   ‚úÖ ${file.src} ‚Üí ${file.dest}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${file.src} n√£o encontrado`);
    }
  });

  console.log('\nüéâ Extens√£o compilada com sucesso!');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('   1. Abra Chrome: chrome://extensions/');
  console.log('   2. Ative "Modo do desenvolvedor"');
  console.log('   3. Clique "Recarregar" na extens√£o LinkedIn Pattern Seeker');
  console.log('   4. Ou clique "Carregar sem compacta√ß√£o" e selecione a pasta "dist"');
  console.log('   5. V√° para linkedin.com/feed/ e teste!');

} catch (error) {
  console.error('‚ùå Erro durante a compila√ß√£o:', error.message);
  process.exit(1);
}